{"ast":null,"code":"var _jsxFileName = \"/home/roman/paralect/startup-summer-2021/09-react-1/classworks/Usik_Roma/src/components/Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"../stylesheets/App.css\";\nimport Modal from \"react-modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = ({\n  filteredItems\n}) => {\n  _s();\n\n  const [sortConfig, setSortConfig] = React.useState({});\n  const [isOpen, setIsOpen] = useState(false);\n\n  function toggleModal() {\n    setIsOpen(!isOpen);\n  }\n\n  React.useMemo(() => {\n    let sortedElements = [...filteredItems];\n\n    if (sortConfig !== null) {\n      sortedElements.sort((a, b) => {\n        if (sortConfig.direction === 'null') {\n          return a.index - b.index;\n        }\n\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n\n        return 0;\n      });\n      filteredItems = sortedElements;\n      sortedElements = null;\n    }\n\n    return sortedElements;\n  }, [filteredItems, sortConfig]);\n\n  const getClassNamesFor = name => {\n    if (!sortConfig) {\n      return;\n    }\n\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n\n  const requestSort = key => {\n    let direction;\n\n    if (sortConfig.key === key) {\n      switch (sortConfig.direction) {\n        case 'ascending':\n          direction = 'descending';\n          break;\n\n        case 'descending':\n          direction = 'null';\n          break;\n\n        case 'null':\n          direction = 'ascending';\n          break;\n\n        default:\n          direction = 'null';\n      }\n    } else {\n      direction = 'ascending';\n    }\n\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"container-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('City'),\n              className: getClassNamesFor('City'),\n              children: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Country'),\n              className: getClassNamesFor('Country'),\n              children: \"Country\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Street'),\n              className: getClassNamesFor('Street'),\n              children: \"Street\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Postcode'),\n              className: getClassNamesFor('Postcode'),\n              children: \"Postcode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Number'),\n              className: getClassNamesFor('Number'),\n              children: \"Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('FullName'),\n              className: getClassNamesFor('FullName'),\n              children: \"FullName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Sex'),\n              className: getClassNamesFor('Sex'),\n              children: \"Sex\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredItems.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n          onClick: toggleModal,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.City\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Street\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Postcode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.FullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Sex\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)]\n        }, item.index + item.FullName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Table, \"XCAohq3W9az5FDSE98de3+q4txc=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/home/roman/paralect/startup-summer-2021/09-react-1/classworks/Usik_Roma/src/components/Table.js"],"names":["React","useState","Modal","Table","filteredItems","sortConfig","setSortConfig","isOpen","setIsOpen","toggleModal","useMemo","sortedElements","sort","a","b","direction","index","key","getClassNamesFor","name","undefined","requestSort","map","item","City","Country","Street","Postcode","Number","FullName","Sex"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport \"../stylesheets/App.css\";\nimport Modal from \"react-modal\";\n\n\n\nconst Table = ({filteredItems}) => {\n    const [sortConfig, setSortConfig] = React.useState({});\n    const [isOpen, setIsOpen] = useState(false);\n\n    function toggleModal() {\n        setIsOpen(!isOpen);\n\n    }\n\n    React.useMemo(() => {\n        let sortedElements = [...filteredItems];\n        if (sortConfig !== null) {\n            sortedElements.sort((a, b) => {\n                if (sortConfig.direction === 'null') {\n                    return a.index - b.index;\n                }\n                if (a[sortConfig.key] < b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\n                }\n                if (a[sortConfig.key] > b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\n                }\n                return 0;\n            });\n            filteredItems = sortedElements;\n            sortedElements = null;\n        }\n        return sortedElements;\n    }, [filteredItems, sortConfig]);\n\n\n    const getClassNamesFor = (name) => {\n        if (!sortConfig) {\n            return;\n        }\n        return sortConfig.key === name ? sortConfig.direction : undefined;\n    };\n\n\n    const requestSort = key => {\n        let direction;\n        if (sortConfig.key === key) {\n            switch (sortConfig.direction) {\n                case 'ascending':\n                    direction = 'descending';\n                    break;\n                case 'descending':\n                    direction = 'null';\n                    break;\n                case 'null':\n                    direction = 'ascending';\n                    break;\n                default:\n                    direction = 'null';\n            }\n        } else {\n            direction = 'ascending';\n        }\n\n        setSortConfig({key, direction});\n    }\n\n\n    return (\n        <div>\n            <table className=\"container-table\">\n                <thead>\n                <tr>\n                    <th>\n                        <button\n                            type=\"button\"\n                            onClick={() => requestSort('City')}\n                            className={getClassNamesFor('City')}\n                        >\n                            City\n                        </button>\n                    </th>\n                    <th>\n                        <button\n                            type=\"button\"\n                            onClick={() => requestSort('Country')}\n                            className={getClassNamesFor('Country')}\n                        >\n                            Country\n                        </button>\n                    </th>\n                    <th>\n                        <button\n                            type=\"button\"\n                            onClick={() => requestSort('Street')}\n                            className={getClassNamesFor('Street')}\n                        >\n                            Street\n                        </button>\n                    </th>\n                    <th>\n                        <button\n                            type=\"button\"\n                            onClick={() => requestSort('Postcode')}\n                            className={getClassNamesFor('Postcode')}\n                        >\n                            Postcode\n                        </button>\n                    </th>\n                    <th>\n                        <button\n                            type=\"button\"\n                            onClick={() => requestSort('Number')}\n                            className={getClassNamesFor('Number')}\n                        >\n                            Number\n                        </button>\n                    </th>\n                    <th>\n                        <button\n                            type=\"button\"\n                            onClick={() => requestSort('FullName')}\n                            className={getClassNamesFor('FullName')}\n                        >\n                            FullName\n                        </button>\n                    </th>\n                    <th>\n                        <button\n                            type=\"button\"\n                            onClick={() => requestSort('Sex')}\n                            className={getClassNamesFor('Sex')}\n                        >\n                            Sex\n                        </button>\n                    </th>\n                </tr>\n                </thead>\n\n                <tbody>\n                {filteredItems.map((item) => (\n                    <tr key={item.index + item.FullName} onClick={toggleModal}>\n                        <td>{item.City}</td>\n                        <td>{item.Country}</td>\n                        <td>{item.Street}</td>\n                        <td>{item.Postcode}</td>\n                        <td>{item.Number}</td>\n                        <td>{item.FullName}</td>\n                        <td>{item.Sex}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            {/*<Modal*/}\n            {/*    isOpen={isOpen}*/}\n            {/*    onRequestClose={toggleModal}*/}\n            {/*    contentLabel=\"My dialog\"*/}\n            {/*    className=\"mymodal\"*/}\n            {/*    overlayClassName=\"myoverlay\"*/}\n            {/*    closeTimeoutMS={500}*/}\n            {/*>*/}\n\n            {/*    <button onClick={toggleModal}>Close modal</button>*/}\n            {/*</Modal>*/}\n        </div>\n    )\n        ;\n};\n\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}